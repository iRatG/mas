#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º OpenAI API.
"""

import os
from real_llm import is_openai_available, RealLLMClient, LLMConfig
from test_cases import BUG_CASES

def test_openai_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenAI API."""
    print("üîç –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö OPENAI API")
    print("="*50)
    
    if not is_openai_available():
        print("‚ùå OpenAI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:")
        print("   1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
        print("   2. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å OPENAI_API_KEY")
        return False
    
    try:
        # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
        client = RealLLMClient()
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
        print(f"   –ú–æ–¥–µ–ª—å: {client.config.model}")
        print(f"   Max tokens: {client.config.max_tokens}")
        print(f"   Temperature: {client.config.temperature}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

def demo_real_analysis():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞ —á–µ—Ä–µ–∑ OpenAI."""
    if not test_openai_connection():
        return
    
    print(f"\nü§ñ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ê–ù–ê–õ–ò–ó–ê –ö–û–î–ê –ß–ï–†–ï–ó OPENAI")
    print("="*60)
    
    # –í—ã–±–µ—Ä–µ–º –æ–¥–∏–Ω –∫–µ–π—Å –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    case = BUG_CASES[2]  # –î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å
    print(f"üìã –ö–µ–π—Å: {case['description']}")
    print(f"–ö–æ–¥:\n{case['code']}")
    
    try:
        client = RealLLMClient()
        
        print(f"\nüîç –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ OpenAI...")
        from real_llm import llm_find_issues_real
        analysis = llm_find_issues_real(case['code'], client)
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:")
        print(f"{analysis}")
        
        print(f"\nüí° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...")
        from real_llm import llm_suggest_fixes_real
        fixes = llm_suggest_fixes_real(analysis, case['code'], client)
        print(f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
        for i, fix in enumerate(fixes, 1):
            print(f"{i}. {fix}")
        
        if fixes:
            print(f"\nüë• –†–µ–≤—å—é –ø–µ—Ä–≤–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è...")
            from real_llm import llm_review_fix_real
            review = llm_review_fix_real(fixes[0], client)
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–≤—å—é: {review}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å OpenAI: {e}")

def demo_cost_estimation():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Ü–µ–Ω–∫–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏."""
    print(f"\nüí∞ –û–¶–ï–ù–ö–ê –°–¢–û–ò–ú–û–°–¢–ò –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø OPENAI API")
    print("="*60)
    
    # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ —Ä–∞—Å—Ü–µ–Ω–∫–∏ –¥–ª—è GPT-4 (–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞ –º–æ–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω–∏—è)
    costs = {
        "gpt-4": {"input": 0.03, "output": 0.06},  # $ –∑–∞ 1K —Ç–æ–∫–µ–Ω–æ–≤
        "gpt-4-turbo": {"input": 0.01, "output": 0.03},
        "gpt-3.5-turbo": {"input": 0.0005, "output": 0.0015}
    }
    
    print("–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ –∫–µ–π—Å–∞:")
    print("(–≤–∫–ª—é—á–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ + –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π + —Ä–µ–≤—å—é)")
    print()
    
    for model, price in costs.items():
        # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: ~500 —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –≤—Ö–æ–¥, ~300 –Ω–∞ –≤—ã—Ö–æ–¥ –∑–∞ –∑–∞–ø—Ä–æ—Å
        # 3 –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∫–µ–π—Å (–∞–Ω–∞–ª–∏–∑, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è, —Ä–µ–≤—å—é)
        input_tokens = 500 * 3  # 1500 —Ç–æ–∫–µ–Ω–æ–≤
        output_tokens = 300 * 3  # 900 —Ç–æ–∫–µ–Ω–æ–≤
        
        cost_per_case = (input_tokens/1000 * price["input"] + 
                        output_tokens/1000 * price["output"])
        
        print(f"{model:15s}: ~${cost_per_case:.4f} –∑–∞ –∫–µ–π—Å")
    
    print(f"\n–î–ª—è –≤—Å–µ—Ö {len(BUG_CASES)} –∫–µ–π—Å–æ–≤:")
    for model, price in costs.items():
        cost_all = (1500/1000 * price["input"] + 900/1000 * price["output"]) * len(BUG_CASES)
        print(f"{model:15s}: ~${cost_all:.3f} –∑–∞ –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç")
    
    print("\n‚ö†Ô∏è –≠—Ç–æ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏. –†–µ–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è.")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏."""
    print("üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° OPENAI API")
    print("="*60)
    
    print("""
üìã –ß–¢–û –ë–£–î–ï–¢ –ü–†–û–î–ï–ú–û–ù–°–¢–†–ò–†–û–í–ê–ù–û:
1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenAI API
2. –†–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ —á–µ—Ä–µ–∑ GPT
3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ AI  
4. –†–µ–≤—å—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ AI
5. –û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

‚ö†Ô∏è –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –§–∞–π–ª .env —Å OPENAI_API_KEY
- –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (pip install -r requirements.txt)
- –°—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ OpenAI –∞–∫–∫–∞—É–Ω—Ç–∞
    """)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    if not is_openai_available():
        print("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å OpenAI API")
        print("\nüìù –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ù–ê–°–¢–†–û–ô–ö–ï:")
        print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
        print("   pip install -r requirements.txt")
        print("2. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞:")
        print("   OPENAI_API_KEY=your_api_key_here")
        print("3. –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á –Ω–∞ https://platform.openai.com/api-keys")
        return
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è
    demo_real_analysis()
    demo_cost_estimation()
    
    print(f"\nüöÄ –ó–ê–ü–£–°–ö MAS –°–ò–°–¢–ï–ú–´ –° OPENAI API:")
    print("python main.py --use-openai --approach both")
    print("python main.py --use-openai --openai-model gpt-3.5-turbo --cases 1 2")
    
    print(f"\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    main()
