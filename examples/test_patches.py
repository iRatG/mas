#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–∞—Ç—á–∏–Ω–≥–∞.
"""

from patch_utils import apply_patch, run_tests
from test_cases import BUG_CASES

def test_individual_patches():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–∞—Ç—á–µ–π."""
    print("üîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ü–ê–¢–ß–ò–ù–ì–ê")
    print("="*50)
    
    for case in BUG_CASES:
        print(f"\nüìã –ö–µ–π—Å {case['id']}: {case['description']}")
        print("-" * 30)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–∏–∫—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–µ–π—Å–∞
        if case['id'] == 1:
            fix_text = "–ó–∞–º–µ–Ω–∏—Ç—å range(len(arr)+1) –Ω–∞ range(len(arr))"
        elif case['id'] == 2:
            fix_text = "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É if data is None: return None"
        elif case['id'] == 3:
            fix_text = "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É if b == 0: return None"
        elif case['id'] == 4:
            fix_text = "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫–æ–≤—ã–µ —á–∏—Å–ª–∞ –≤ int"
        elif case['id'] == 5:
            fix_text = "–ó–∞–º–µ–Ω–∏—Ç—å print(i) –Ω–∞ print(n)"
        else:
            continue
            
        print(f"–ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–∫—Å: {fix_text}")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á
        patched_code = apply_patch(case['code'], fix_text)
        
        print("–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥:")
        print(case['code'])
        print("\n–ü–æ—Å–ª–µ –ø–∞—Ç—á–∞:")
        print(patched_code)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º
        passed, test_output = run_tests(patched_code, case['id'])
        status = "‚úÖ –ü–†–û–®–ï–õ" if passed else "‚ùå –ù–ï –ü–†–û–®–ï–õ"
        print(f"\n–¢–µ—Å—Ç: {status}")
        if not passed:
            print(f"–û—à–∏–±–∫–∞: {test_output}")

if __name__ == "__main__":
    test_individual_patches()
