#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –±–∞–≥–æ–≤ –∏ –∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ MAS —Å–∏—Å—Ç–µ–º—É.
"""

from test_cases import BUG_CASES
import traceback

def demonstrate_real_bugs():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ç–æ–≥–æ, —á—Ç–æ –±–∞–≥–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—Ç."""
    print("üêõ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ï–ê–õ–¨–ù–´–• –ë–ê–ì–û–í")
    print("="*60)
    
    for case in BUG_CASES:
        print(f"\nüìã –ö–µ–π—Å {case['id']}: {case['description']}")
        print("-" * 40)
        print("–ö–æ–¥:")
        print(case['code'])
        print("\nüö® –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–¥ –≤ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
            env = {}
            exec(case['code'], env, env)
            
            # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            if case['id'] == 1:  # –í—ã—Ö–æ–¥ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
                result = env['calculate_sum']([1, 2, 3])
                print(f"‚ùå –ù–ï–û–ñ–ò–î–ê–ù–ù–û: –∫–æ–¥ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è! –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
                
            elif case['id'] == 2:  # None –æ–±—Ä–∞—â–µ–Ω–∏–µ
                result = env['process_data'](None)
                print(f"‚ùå –ù–ï–û–ñ–ò–î–ê–ù–ù–û: –∫–æ–¥ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è! –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
                
            elif case['id'] == 3:  # –î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å
                result = env['divide'](10, 0)
                print(f"‚ùå –ù–ï–û–ñ–ò–î–ê–ù–ù–û: –∫–æ–¥ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è! –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
                
            elif case['id'] == 4:  # –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–∏–ø–æ–≤
                result = env['add_numbers']('hello', 5)
                print(f"‚ùå –ù–ï–û–ñ–ò–î–ê–ù–ù–û: –∫–æ–¥ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è! –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
                
            elif case['id'] == 5:  # –ù–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
                env['count_down'](2)
                print("‚ùå –ù–ï–û–ñ–ò–î–ê–ù–ù–û: –∫–æ–¥ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫!")
                
        except Exception as e:
            print(f"‚úÖ –û–®–ò–ë–ö–ê –û–ë–ù–ê–†–£–ñ–ï–ù–ê: {type(e).__name__}: {e}")
            print(f"   –≠—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–∞ –ø—Ä–æ–±–ª–µ–º–∞, –∫–æ—Ç–æ—Ä—É—é –¥–æ–ª–∂–Ω–∞ —Ä–µ—à–∏—Ç—å MAS —Å–∏—Å—Ç–µ–º–∞!")

def demonstrate_working_fixes():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—á–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π."""
    print(f"\n{'='*60}")
    print("üîß –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ö–û–î–ê")
    print("="*60)
    
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏
    fixed_codes = {
        1: """def calculate_sum(arr):
    s = 0
    for i in range(len(arr)):  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —É–±—Ä–∞–ª–∏ +1
        s += arr[i]
    return s""",
        
        2: """def process_data(data):
    if data is None:  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –¥–æ–±–∞–≤–∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É
        return None
    result = data.get('value')
    return result * 2 if result is not None else None""",
        
        3: """def divide(a, b):
    if b == 0:  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
        return None
    return a / b""",
        
        4: """def add_numbers(a, b):
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤
    def _to_num(x):
        if isinstance(x, str):
            try:
                return int(x)
            except ValueError:
                try:
                    return float(x)
                except ValueError:
                    raise TypeError("–Ω–µ–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º—ã–π —Ç–∏–ø")
        return x
    a2, b2 = _to_num(a), _to_num(b)
    return a2 + b2""",
        
        5: """def count_down(n):
    while n >= 0:
        print(n)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø–µ—á–∞—Ç–∞–µ–º n, –∞ –Ω–µ i
        n -= 1"""
    }
    
    test_cases = {
        1: lambda env: env['calculate_sum']([1, 2, 3]),
        2: lambda env: (env['process_data'](None), env['process_data']({'value': 3})),
        3: lambda env: (env['divide'](10, 2), env['divide'](10, 0)),
        4: lambda env: env['add_numbers']('5', 3),
        5: lambda env: env['count_down'](2)
    }
    
    for case_id, fixed_code in fixed_codes.items():
        case = BUG_CASES[case_id - 1]
        print(f"\nüìã –ö–µ–π—Å {case_id}: {case['description']}")
        print("-" * 40)
        print("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥:")
        print(fixed_code)
        print("\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
        
        try:
            env = {}
            exec(fixed_code, env, env)
            result = test_cases[case_id](env)
            print(f"‚úÖ –£–°–ü–ï–•: {result}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏: {e}")

if __name__ == "__main__":
    demonstrate_real_bugs()
    demonstrate_working_fixes()
    
    print(f"\n{'='*60}")
    print("üéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï")
    print("="*60)
    print("1. –ú—ã –ø–æ–∫–∞–∑–∞–ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –±–∞–≥–∏ –≤ –∫–æ–¥–µ")
    print("2. –ú—ã –ø–æ–∫–∞–∑–∞–ª–∏, –∫–∞–∫ –∏—Ö –º–æ–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å")
    print("3. –¢–µ–ø–µ—Ä—å MAS —Å–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π—Ç–∏ –∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ç–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è!")
    print("\n–ó–∞–ø—É—Å—Ç–∏—Ç–µ: python main.py --approach both")
    print("="*60)
